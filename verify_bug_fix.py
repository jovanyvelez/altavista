#!/usr/bin/env python3
"""
Script de Verificaci√≥n Final - Correcci√≥n del Bug de C√°lculo de Intereses
=========================================================================

Este script verifica que la correcci√≥n del c√°lculo de intereses funciona
correctamente, mostrando la diferencia entre el m√©todo anterior (incorrecto)
y el nuevo m√©todo (correcto).
"""

import sys
from pathlib import Path

# Agregar el directorio ra√≠z del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from crear_cargos_historicos import GeneradorCargosHistoricos
from app.models.database import DATABASE_URL
from sqlmodel import create_engine, Session, text
from decimal import Decimal

def verificar_bug_corregido():
    """Verifica que el bug del c√°lculo de intereses se corrigi√≥"""
    
    print("üêõ‚û°Ô∏è‚úÖ VERIFICACI√ìN DE CORRECCI√ìN DEL BUG DE INTERESES")
    print("=" * 65)
    
    generador = GeneradorCargosHistoricos()
    engine = create_engine(DATABASE_URL)
    
    # Apartamento de prueba con d√©bitos y cr√©ditos
    apartamento_id = 1  # Apartamento 9801
    a√±o_test = 2024
    mes_test = 11  # Noviembre 2024
    
    # Mes anterior para el c√°lculo base
    a√±o_anterior = a√±o_test
    mes_anterior = mes_test - 1  # Octubre 2024
    
    print(f"\nüìä AN√ÅLISIS PARA APARTAMENTO {apartamento_id} - {mes_test:02d}/{a√±o_test}")
    print(f"    (Base de c√°lculo: saldo neto al {mes_anterior:02d}/{a√±o_anterior})")
    print("-" * 65)
    
    with Session(engine) as session:
        # 1. M√©todo ANTERIOR (INCORRECTO): Solo d√©bitos del concepto 1
        sql_metodo_anterior = f"""
            SELECT 
                COALESCE(SUM(monto), 0) as solo_cuotas_debito
            FROM registro_financiero_apartamento
            WHERE apartamento_id = {apartamento_id}
            AND fecha_efectiva <= '{a√±o_anterior}-{mes_anterior:02d}-31'
            AND concepto_id = 1  -- Solo cuotas ordinarias
            AND tipo_movimiento = 'DEBITO'
        """
        
        solo_cuotas = session.exec(text(sql_metodo_anterior)).first().solo_cuotas_debito or Decimal('0.00')
        
        # 2. M√©todo NUEVO (CORRECTO): Saldo neto de todos los conceptos (excepto intereses)
        saldo_neto = generador.calcular_saldo_neto_al_mes(apartamento_id, a√±o_anterior, mes_anterior)
        
        # 3. Desglose detallado para mostrar la diferencia
        sql_desglose = f"""
            SELECT 
                concepto_id,
                SUM(CASE WHEN tipo_movimiento = 'DEBITO' THEN monto ELSE 0 END) as debitos,
                SUM(CASE WHEN tipo_movimiento = 'CREDITO' THEN monto ELSE 0 END) as creditos,
                SUM(CASE WHEN tipo_movimiento = 'DEBITO' THEN monto ELSE -monto END) as neto
            FROM registro_financiero_apartamento
            WHERE apartamento_id = {apartamento_id}
            AND fecha_efectiva <= '{a√±o_anterior}-{mes_anterior:02d}-31'
            AND concepto_id != 3  -- Excluir intereses
            GROUP BY concepto_id
            ORDER BY concepto_id
        """
        
        desglose = session.exec(text(sql_desglose)).all()
        
        print("üìã DESGLOSE POR CONCEPTO:")
        print("Concepto | D√©bitos     | Cr√©ditos    | Saldo Neto")
        print("-" * 52)
        
        total_debitos = Decimal('0.00')
        total_creditos = Decimal('0.00')
        
        for row in desglose:
            print(f"   {row.concepto_id:2d}    | ${row.debitos:>10,.2f} | ${row.creditos:>10,.2f} | ${row.neto:>10,.2f}")
            total_debitos += row.debitos
            total_creditos += row.creditos
        
        print("-" * 52)
        print(f" TOTAL   | ${total_debitos:>10,.2f} | ${total_creditos:>10,.2f} | ${saldo_neto:>10,.2f}")
        
        print(f"\nüîç COMPARACI√ìN DE M√âTODOS:")
        print(f"   ‚ùå M√©todo anterior (solo d√©bitos concepto 1): ${solo_cuotas:,.2f}")
        print(f"   ‚úÖ M√©todo corregido (saldo neto):            ${saldo_neto:,.2f}")
        print(f"   üìä Diferencia:                               ${abs(saldo_neto - solo_cuotas):,.2f}")
        
        if abs(saldo_neto - solo_cuotas) > Decimal('0.01'):
            print("   üéØ ¬°La correcci√≥n hace diferencia!")
        else:
            print("   ‚ÑπÔ∏è  En este caso espec√≠fico, ambos m√©todos dan el mismo resultado")
        
        # 4. Calcular intereses con ambos m√©todos
        tasa = generador.obtener_tasa_interes(a√±o_anterior, mes_anterior)
        tasa_porcentaje = float(tasa) * 100
        
        interes_metodo_anterior = solo_cuotas * tasa
        interes_metodo_corregido = saldo_neto * tasa
        
        print(f"\nüí∞ C√ÅLCULO DE INTERESES (Tasa: {tasa_porcentaje:.2f}%):")
        print(f"   ‚ùå Con m√©todo anterior:   ${interes_metodo_anterior:,.2f}")
        print(f"   ‚úÖ Con m√©todo corregido:  ${interes_metodo_corregido:,.2f}")
        print(f"   üìä Diferencia en inter√©s: ${abs(interes_metodo_corregido - interes_metodo_anterior):,.2f}")
        
        # 5. Mostrar qu√© incluye cada m√©todo
        print(f"\nüìñ QU√â INCLUYE CADA M√âTODO:")
        print(f"   ‚ùå M√©todo anterior:")
        print(f"      - Solo d√©bitos del concepto 1 (cuotas ordinarias)")
        print(f"      - Ignora otros conceptos y pagos realizados")
        print(f"   ‚úÖ M√©todo corregido:")
        print(f"      - Todos los d√©bitos (cuotas, servicios, etc.)")
        print(f"      - Menos todos los cr√©ditos (pagos)")
        print(f"      - Excluye intereses previos")
        print(f"      - = Saldo real pendiente")

def main():
    """Funci√≥n principal"""
    try:
        verificar_bug_corregido()
        
        print(f"\n" + "=" * 65)
        print("‚úÖ CORRECCI√ìN VERIFICADA")
        print("=" * 65)
        print("\nüéâ El bug del c√°lculo de intereses ha sido corregido exitosamente!")
        print("   Los intereses ahora se calculan sobre el saldo neto real.")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la verificaci√≥n: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
