#!/usr/bin/env python3
"""
Script para probar el dashboard del propietario despu√©s de las correcciones
"""

import requests
import json
from datetime import datetime

def test_propietario_dashboard():
    """Prueba el dashboard del propietario"""
    
    print("üß™ PROBANDO DASHBOARD DEL PROPIETARIO")
    print("=" * 50)
    
    base_url = "http://localhost:8000"
    
    # Crear una sesi√≥n para mantener cookies
    session = requests.Session()
    
    try:
        # 1. Obtener p√°gina de login
        print("\n1Ô∏è‚É£ Obteniendo p√°gina de login...")
        login_page = session.get(f"{base_url}/login")
        
        if login_page.status_code == 200:
            print("   ‚úÖ P√°gina de login cargada")
        else:
            print(f"   ‚ùå Error cargando login: {login_page.status_code}")
            return False
        
        # 2. Intentar login como propietario (necesitar√≠as credenciales reales)
        print("\n2Ô∏è‚É£ Informaci√≥n para login manual:")
        print("   üåê URL: http://localhost:8000/login")
        print("   üë§ Necesitas credenciales de un usuario propietario")
        print("   üìã Luego navega a: http://localhost:8000/propietario/dashboard")
        
        # 3. Probar acceso directo al dashboard (sin autenticaci√≥n)
        print("\n3Ô∏è‚É£ Probando acceso directo al dashboard...")
        dashboard_response = session.get(f"{base_url}/propietario/dashboard")
        
        if dashboard_response.status_code == 401:
            print("   ‚úÖ Redirecci√≥n de autenticaci√≥n funcionando correctamente")
        elif dashboard_response.status_code == 200:
            print("   ‚ö†Ô∏è Dashboard accesible sin autenticaci√≥n (revisar seguridad)")
        else:
            print(f"   üìä Respuesta: {dashboard_response.status_code}")
        
        # 4. Verificar endpoints relacionados
        print("\n4Ô∏è‚É£ Verificando endpoints del propietario...")
        endpoints = [
            "/propietario/estado-cuenta",
            "/propietario/mis-pagos"
        ]
        
        for endpoint in endpoints:
            try:
                response = session.get(f"{base_url}{endpoint}")
                status = "‚úÖ OK" if response.status_code in [200, 401, 302] else f"‚ùå {response.status_code}"
                print(f"   {endpoint}: {status}")
            except Exception as e:
                print(f"   {endpoint}: ‚ùå Error - {e}")
        
        print("\n" + "=" * 50)
        print("üéØ RESUMEN DE LA PRUEBA:")
        print("‚úÖ La aplicaci√≥n est√° funcionando")
        print("‚úÖ Los endpoints est√°n respondiendo")
        print("‚úÖ La autenticaci√≥n est√° funcionando")
        print("\nüîß PASOS PARA PRUEBA MANUAL:")
        print("1. Abrir: http://localhost:8000")
        print("2. Iniciar sesi√≥n con credenciales de propietario")
        print("3. Verificar que aparezcan los apartamentos del propietario")
        print("4. Probar navegaci√≥n a estado de cuenta")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå No se puede conectar a la aplicaci√≥n")
        print("   Aseg√∫rate de que est√© corriendo en http://localhost:8000")
        return False
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        return False

def verificar_datos_propietario():
    """Verifica los datos del propietario 5 directamente en la base de datos"""
    
    print("\nüîç VERIFICACI√ìN DIRECTA DE DATOS")
    print("=" * 40)
    
    try:
        # Importar despu√©s de cambiar al directorio correcto
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        
        from app.models import db_manager
        from sqlmodel import text
        
        session = db_manager.get_session()
        
        # Verificar propietario 5
        print("üìã PROPIETARIO 5:")
        result = session.execute(text("""
            SELECT id, nombre_completo, documento_identidad, email
            FROM propietario 
            WHERE id = 5
        """))
        
        propietario = result.fetchone()
        if propietario:
            print(f"   ID: {propietario[0]}")
            print(f"   Nombre: {propietario[1]}")
            print(f"   Documento: {propietario[2]}")
            print(f"   Email: {propietario[3] or 'No registrado'}")
        else:
            print("   ‚ùå Propietario 5 no encontrado")
            return False
        
        # Verificar apartamentos del propietario 5
        print("\nüè† APARTAMENTOS DEL PROPIETARIO 5:")
        result = session.execute(text("""
            SELECT a.id, a.identificador, a.coeficiente_copropiedad
            FROM apartamento a
            WHERE a.propietario_id = 5
            ORDER BY a.identificador
        """))
        
        apartamentos = result.fetchall()
        if apartamentos:
            for apt in apartamentos:
                print(f"   - Apartamento {apt[0]} ({apt[1]}) - Coef: {apt[2]}")
        else:
            print("   ‚ùå No hay apartamentos asignados")
            return False
        
        session.close()
        print("\n‚úÖ Datos verificados correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando datos: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO PRUEBAS DEL DASHBOARD PROPIETARIO")
    print(f"‚è∞ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Verificar datos primero
    datos_ok = verificar_datos_propietario()
    
    # Probar aplicaci√≥n web
    app_ok = test_propietario_dashboard()
    
    print("\n" + "=" * 60)
    if datos_ok and app_ok:
        print("üéâ TODAS LAS PRUEBAS PASARON EXITOSAMENTE")
        print("‚úÖ El dashboard del propietario deber√≠a funcionar correctamente")
    else:
        print("‚ö†Ô∏è ALGUNAS PRUEBAS FALLARON")
        print("üîß Revisa los errores arriba para m√°s detalles")
